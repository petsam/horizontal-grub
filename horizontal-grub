#!/bin/bash
#####################################################################
## ===================== Disclaimer ============================== ##
## This script-program is a proof-of-concept project and           ##
## a self training playground on Bash scripting.                   ##
## It is free for copy and use, while I am not responsible for any ##
## damage on your software or hardware. Use at your own risk!      ##
## It would be kind if you report any possible bugs, or ideas for  ##
## smart improvement of current code logic and possible new        ##
## features that are relevant.                                     ##
## =============================================================== ##

#####################################################################
##                    horizontal-grub                              ##
## This script will transform the current grub configuration file  ##
## generated by grub, to a fake-horizontal style.                  ##
## It would be more useful if it was accompannied with a           ##
## relevant and suitable theme.                                    ##
## There is a theme as a work in progress, which will be           ##
## a possible template for theme developers to create some more.   ##
## =============================================================== ##
#####           petsam's "Adventures in Bash"                   #####
#####################################################################


# Don't run as root or sudo
if (( $(id -u) == 0 )); then
    echo "You should not run this script as root"
    echo "Exiting..."
    exit;
fi

# TODO Unnecessary Special character in Grub entry REPORT at Manjaro grub
# TODO consider a grub patch to have better distro names-labels in menus

# Create work directory

if [ -w /tmp ];then
	WorkDir=/tmp/safesync-$(date +%s)
else
	WorkDir=$HOME/.local/tmp/safesync-$(date +%s)
fi
mkdir -p "$WorkDir"
echo "Created working directory :" "$WorkDir"
cd $WorkDir

if [ -f /bootgrub/grub.cfg ]; then
	if [ -r /bootgrub/grub.cfg ]; then
		cp /boot/grub/grub.cfg grub.cfg
	else
		pkexec cp /boot/grub/grub.cfg grub.cfg
		pkexec chown $USER grub.cfg
	fi
else
	echo "Grub configuration /boot/grub/grub.cfg was not found."
	echo "Exiting..."
	exit;
fi


# Split sections

cat grub.cfg | grep -Fm 1 -B 2000 "### BEGIN /etc/grub.d/10_linux ###" > horizontal-grub.cfg
cat grub.cfg | grep -Fm 1 -A 2000 "### BEGIN /etc/grub.d/10_linux ###" | grep -Fm 1 -B 2000 "### END /etc/grub.d/10_linux ###" | grep -nv ^# | tr " " "^" > maindistro.cfg
cat grub.cfg | grep -Fm 1 -A 2000 "### BEGIN /etc/grub.d/30_os-prober ###" | grep -Fm 1 -B 2000 "### END /etc/grub.d/30_os-prober ###" | grep -nv ^# | tr " " "^" > osprobed.cfg

# Define Parse function

function ParseDistros {
	if [ $# = 0 ]; then
		echo "No arguments passed. Something went wrong. Exiting..."
		return 1
	elif [ $# = 1 ]; then
		echo "Only one argument passed. Something went wrong. Exiting..."
		return 1
	else
		echo $# " arguments passed. Starting parsing..."
	fi


	# Parse passed arguments

	local EntriesType="$1"
	echo "Entry Type is of " $EntriesType
	shift
	echo "Arguments left are :" $#
	local -a DistroSections
	SentDBs=$#
	for (( i=0; i<$SentDBs; i++ ))
		do
			DistroSections[$i]=$1
			shift
		done

	# Get distro menus borders

	ProbedEntry=0
	IsParsable=1
	for EntryBorder in ${DistroSections[@]}
		do
			CurrEntry="$(echo $EntryBorder | grep -iwoE "submenu|menuentry|}")"
			echo "Entry is of Type " "$CurrEntry"
			if [ "$CurrEntry" = "menuentry" ]; then
				MainEntry[$ProbedEntry]=$(echo $EntryBorder | cut -d ":" -f1)
				echo "Skipping... " ${MainEntry[$ProbedEntry]}
				IsParsable=1
			elif [ "$CurrEntry" = "submenu" ]; then
				IsParsable=0
				EntryStart[$ProbedEntry]=$(echo $EntryBorder | cut -d ":" -f1)
			else
				if [ "$IsParsable" = 0 ]; then
					EntryEnd[$ProbedEntry]=$(echo $EntryBorder | cut -d ":" -f1)
					LastBracketLine=${EntryEnd[$ProbedEntry]}
					echo "Distro " "${ProbedEntry}" "Main Entry: " "${MainEntry[$ProbedEntry]}" "Start line: " "${EntryStart[$ProbedEntry]}" "End line: " "${EntryEnd[$ProbedEntry]}" "Last Bracket: " $LastBracketLine
					((ProbedEntry+=1))
				fi

				IsParsable=1
			fi
		done
	# Advanced submenu entries
	if [ "$EntriesType" = "maindistro.cfg" ]; then
		EntryOut=1
	else
		EntryOut=0
		for StartLine in ${EntryStart[@]}
			do
#				echo "StartLine: " $StartLine
				cat "$EntriesType" | grep "^${StartLine}\:" | cut -d ":" -f2 | tr "^" " " >> horizontal-grub.cfg
				((EntryOut+=1))
			done
	fi

# Distro menu sections

	until [ $EntryOut = 0 ]
		do
			echo "Adding Entry: " $EntryOut
			((EntryOut-=1))
			RStartLine=${EntryStart[$EntryOut]}
			EntryLines=${EntryEnd[$EntryOut]}
			MainLine=${MainEntry[$EntryOut]}
			((RStartLine+=2))
			((EntryLines-=$RStartLine))
			echo "Entry lines to add: " $EntryLines
			cat "$EntriesType" | grep "^$MainLine\:" | cut -d ":" -s -f 2,3,4 | tr "^" " " >> horizontal-grub.cfg
			cat "$EntriesType" | grep -A ${EntryLines} "^$RStartLine\:" | cut -d ":" -s -f 2,3,4 | tr "^" " "  >> horizontal-grub.cfg
		done
}

# Define menu entries vars

OSproberDistros=$(cat osprobed.cfg | grep -E "\:submenu|\:menuentry|\:}")
MainDistro=$(cat maindistro.cfg | grep -E "\:submenu|\:menuentry|\:}")

# Add information message for grub transformation

echo "
#### Trasformed grub menu to pseudo-horizontal by horizontal-grub ####
" >> horizontal-grub.cfg



# Call parse function

ParseDistros "osprobed.cfg" ${OSproberDistros[@]}
OsProberLastLine=$LastBracketLine
echo "osprober last line: " $OsProberLastLine
ParseDistros "maindistro.cfg" ${MainDistro[@]}
((OsProberLastLine+=1))
cat osprobed.cfg | grep -A 2000 "^$OsProberLastLine\:" | cut -d ":" -s -f 2,3,4 | tr "^" " "  >> horizontal-grub.cfg;
cat grub.cfg | grep -Fm 1 -A 2000 "### END /etc/grub.d/30_os-prober ###" >> horizontal-grub.cfg;


if [ -s horizontal-grub.cfg ]; then
	echo "The new configuration file is created"
	while true; do
	read -p "Do you want to save it as your current /boot/grub/grub.cfg?
	[Y]es [N]o" SaveGrubcfg
	echo "$MyBranch"
	case $SaveGrubcfg in
	[Yy]) echo "Copying to system..."
		pkexec cp -b --suffix ."$(date +%s)" "$WorkDir"/grub.cfg /boot/grub/grub.cfg
		# TODO ask to delete workdir
		break ;;
	[Nn]) echo " The new configuration file is saved at "$WorkDir"/grub.cfg"
			echo "You may use this command to save at system (the old one is backed up)"
			echo "sudo cp -b --suffix old "$WorkDir"/grub.cfg /boot/grub/grub.cfg "
	break ;;
		*) echo "   Answer [Y]es or [N]o. You will keep the file locally, if you answer 'No'" ;;
	esac
	done
else
	echo "There were errors and the grub configuration could not be created."
	echo "If you think this is a bug, please report it to the script author."
fi

exit