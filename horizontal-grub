#!/bin/bash
#####################################################################
## ===================== Disclaimer ============================== ##
## This script-program is a proof-of-concept project and           ##
## a self training playground on Bash scripting.                   ##
## It is free for copy and use, while I am not responsible for any ##
## damage on your software or hardware. Use at your own risk!      ##
## It would be kind if you report any possible bugs, or ideas for  ##
## smart improvement of current code logic and possible new        ##
## features that are relevant.                                     ##
## =============================================================== ##

#####################################################################
##                    horizontal-grub                              ##
## This script will transform the current grub configuration file  ##
## generated by grub, to a fake-horizontal style.                  ##
## It would be more useful if it was accompannied with a           ##
## relevant and suitable theme.                                    ##
## There is a theme as a work in progress, which will be           ##
## a possible template for theme developers to create some more.   ##
## =============================================================== ##
#####           petsam's "Adventures in Bash"                   #####
#####################################################################


# Don't run as root or sudo
if (( $(id -u) == 0 )); then
    echo "You should not run this script as root"
    echo "Exiting..."
    exit;
fi

# TODO Unnecessary Special character in Grub entry REPORT at Manjaro grub
# TODO consider a grub patch to have better distro names-labels in menus

# Help message
HorizontalMenuHelp="horizontal-grub transforms the current grub configuration file generated by grub, to a fake-horizontal style
    Usage:
    horizontal-grub [PATH] If PATH is ommited, default /boot/grub/grub.cfg will be used
    horizontal-grub (-h --help) This help information message"


# Check for given command line parameters

#CustomCfg=false
if [ $# -eq 0 ]; then
	GrubcfgPath="/boot/grub/grub.cfg"
elif [ $1 = "-h" ] || [ $1 = "--help" ]; then
	echo -e "$HorizontalMenuHelp"
	exit;
else
	if [ ${1:0:1} = "/" ]; then
		GrubcfgPath="$1"
	else
		GrubcfgPath="$(pwd)"/"$1"
	fi
fi

if [ $(stat -c "%U" $GrubcfgPath) = $(whoami) ]; then
	FileReadable=true
elif [ $(echo $(groups) | grep -c $(stat -c "%G" $GrubcfgPath)) = 1 ] && [ ${$(stat -c "%a" $GrubcfgPath):-2:1} >= 4 ]; then
	FileReadable=true
elif [ $(echo $(groups) | grep -c "wheel") = 1 ]; then
	echo "File is not owned by you, but you are the administrator."
	FileReadable=false
else
	echo "The file is not readable, or you have not permission to read"
	exit;
fi
HorizontalMenuHeading="
#### Trasformed grub menu to pseudo-horizontal by horizontal-grub ####
"
echo "Transforming " $GrubcfgPath
# Create work directory
DateSuffix=$(date +%s)
if [ -w /tmp ];then
	WorkDir=/tmp/horizontal-grub-"$DateSuffix"
else
	WorkDir=$HOME/.local/tmp/horizontal-grub-"$DateSuffix"
fi
mkdir -p "$WorkDir"
cd $WorkDir
GrubcfgAttrs=$(stat -c "%a" /boot/grub/grub.cfg)
if [ $FileReadable = false ]; then
	pkexec cp $GrubcfgPath "$WorkDir"/grub.cfg
	pkexec chown $USER "$WorkDir"/grub.cfg
elif [ $FileReadable = true ]; then
	cp "$GrubcfgPath" grub.cfg
fi

if ! [ -f grub.cfg ]; then
	echo "Grub configuration was not found."
	echo "Exiting..."
	rm -R "$WorkDir"
	exit 1;
fi

if (( $(cat grub.cfg | grep -cF "#### Trasformed grub menu to pseudo-horizontal by horizontal-grub ####") >= 1 )); then
	echo "This grub configuration is already transformed by horizontal-menu."
	echo "Exiting..."
	rm -R "$WorkDir"
	exit 1;
fi


# Split sections

cat grub.cfg | grep -Fm 1 -B 2000 "### BEGIN /etc/grub.d/10_linux ###" > horizontal-grub.cfg
cat grub.cfg | grep -Fm 1 -A 2000 "### BEGIN /etc/grub.d/10_linux ###" | grep -Fm 1 -B 2000 "### END /etc/grub.d/10_linux ###" | grep -nv ^# | tr " " "^" > maindistro.cfg
cat grub.cfg | grep -Fm 1 -A 2000 "### BEGIN /etc/grub.d/30_os-prober ###" | grep -Fm 1 -B 2000 "### END /etc/grub.d/30_os-prober ###" | grep -nv ^# | tr " " "^" > osprobed.cfg

MultiBooter=$(cat osprobed.cfg | grep -cE "\:submenu|\:menuentry" 2>/dev/null)
if [ $MultiBooter -eq 0 ]; then
	echo "There was no other system configured by grub. You are not multibooting."
	echo "There is no reason to use this script. Exiting..."
	rm -R "$WorkDir"
	exit 1;
fi
echo "Created working directory :" "$WorkDir"

# Define Parse function

function ParseDistros {
	if [ $# = 0 ]; then
		echo "Not grub compatible data in the file. Something is wrong. Exiting..."
		return 1
	elif [ $# = 1 ]; then
		echo "Not distro configuration found. Something went wrong. Exiting..."
		return 1
	fi

	# Parse passed arguments
	local EntriesType="$1"
	shift
	local -a DistroSections
	SentDBs=$#
	for (( i=0; i<$SentDBs; i++ ))
		do
			DistroSections[$i]=$1
			shift
		done

	AlienEntries="false"
	if [ $EntriesType = "AlienDistros" ]; then
		EntriesType="osprobed.cfg"
		AlienEntries="true"
	fi
	# Get distro menus borders

	ProbedEntry=0
	IsParsable=1
	IsAlien=1
	for EntryBorder in ${DistroSections[@]}
		do
			CurrEntry="$(echo $EntryBorder | grep -woE "submenu|menuentry|}")"
			#echo "Current Entry" $CurrEntry
			if [ "$CurrEntry" = "menuentry" ]; then
				if [  "$EntriesType" = "osprobed.cfg" ] ; then
					if [  $(echo $EntryBorder | grep -icwE "windows|osx|hurd|gnuhurd") -ge 1 ] ; then
						EntryStart[$ProbedEntry]=$(echo $EntryBorder | cut -d ":" -f1)
						MainName[$ProbedEntry]=$(echo $EntryBorder |  awk -F "'" '{  print $2 }')
						IsAlien=0
						IsParsable=0
					else
						#MainEntry[$ProbedEntry]=$(echo $EntryBorder | cut -d ":" -f1)
						MainName[$ProbedEntry]=$(echo $EntryBorder |  awk -F "'" '{  print $2 }')
						IsParsable=1
					fi
					MainClass[$ProbedEntry]=$(echo $EntryBorder | awk -F "--" '{  print $2 }')
					EntryAlien[$ProbedEntry]=$IsAlien
				elif [ "$EntriesType" = "maindistro.cfg" ]; then
					MainDistroClass=$(echo $EntryBorder | awk -F "--" '{  print $2 }')
					MainClass[$ProbedEntry]=$MainDistroClass
					MainName[$ProbedEntry]=$(echo $EntryBorder |  awk -F "'" '{  print $2 }')
					IsParsable=1
				fi
			elif [ "$CurrEntry" = "submenu" ]; then
				EntryStart[$ProbedEntry]=$(echo $EntryBorder | cut -d ":" -f1)
				EntryAlien[$ProbedEntry]=$IsAlien
				IsParsable=0
			else
				if [ $IsParsable -eq 0 ]; then
					EntryEnd[$ProbedEntry]=$(echo $EntryBorder | cut -d ":" -f1)
					LastBracketLine=${EntryEnd[$ProbedEntry]}
					((ProbedEntry+=1))
				fi
				EntryAlien[$ProbedEntry]=$IsAlien
				IsParsable=1
				IsAlien=1
			fi
		done
	#echo "Entry start" ${EntryStart[@]}
	#echo "Entry end  " ${EntryEnd[@]}
	# Remove main distro class
	if [ "$EntriesType" = "maindistro.cfg" ]; then
		sed -i '/menuentry\^/ s/\-\-'$MainDistroClass'//g' "$EntriesType"
	fi

	# Advanced submenu entries
	if [ "$EntriesType" = "maindistro.cfg" ]; then
		EntryOut=1
	elif [ "$EntriesType" = "osprobed.cfg" ]; then
		EntryOut=0
		if [ $AlienEntries = "false" ]; then
			for StartLine in ${EntryStart[@]}
				do
					if [ ${EntryAlien[$EntryOut]} -eq 1 ]  ; then
						MainEntryName="\^\^\>\>\>\>\^\^"${MainName[$EntryOut]}
						cat "$EntriesType" | grep "^${StartLine}\:" | awk -F "'" -v OFS="'" -v mainentry="$MainEntryName" ' { print $1, mainentry, $3, $4, $5 }' 2>/dev/null | cut -d ":" -f2,3,4 | tr "^" " " >> horizontal-grub.cfg
					fi
					((EntryOut+=1))
				done
		fi
	fi

# Distro menu sections

if [ $AlienEntries = "false" ]; then
	echo "Looking into " $EntriesType"..."
	until [ $EntryOut = 0 ]
		do
			((EntryOut-=1))
			if [ ${EntryAlien[$EntryOut]} -eq 1 ]  ; then
				RStartLine=${EntryStart[$EntryOut]}
				EntryLines=${EntryEnd[$EntryOut]}
				echo "Found " $(echo  ${MainClass[$EntryOut]} | cut -d\^ -f2) "  " $(echo  ${MainName[$EntryOut]} | tr "^" " ")
				((RStartLine+=1))
				((EntryLines-=$RStartLine))
				if [ "$EntriesType" = "maindistro.cfg" ]; then
				((EntryLines-=2))
				fi
				cat "$EntriesType" | grep "^$RStartLine\:" |  sed 's/class\^gnu-linux\^/'${MainClass[$EntryOut]}'\-\-class\^gnu-linux\^/g' | cut -d ":" -s -f 2,3,4 | tr "^" " "  >> horizontal-grub.cfg
				((RStartLine+=1))
				cat "$EntriesType" | grep -A ${EntryLines} "^$RStartLine\:" | cut -d ":" -s -f 2,3,4 | tr "^" " "  >> horizontal-grub.cfg
			fi
		done
elif [ $AlienEntries = "true" ]; then
	echo "Looking for Aliens..."
	for entry in ${EntryStart[@]} ;
	do
		if [ ${EntryAlien[$EntryOut]} -eq 0 ]  ; then
			RStartLine=${EntryStart[$EntryOut]}
			EntryLines=${EntryEnd[$EntryOut]}
			echo "Found " $(echo  ${MainClass[$EntryOut]} | cut -d\^ -f2) "  " $(echo  ${MainName[$EntryOut]} | tr "^" " ")
			cat "$EntriesType" | grep "^$RStartLine\:" |  sed 's/'${MainClass[$EntryOut]}'\-\-//g' | cut -d ":" -s -f 2,3,4 | tr "^" " "  >> horizontal-grub.cfg
			((RStartLine+=1))
			((EntryLines-=$RStartLine))
			cat "$EntriesType" | grep -A ${EntryLines} "^$RStartLine\:" | cut -d ":" -s -f 2,3,4 | tr "^" " "  >> horizontal-grub.cfg
		fi
		((EntryOut+=1))
	done
fi
unset
}

# Define menu entries vars

OSproberDistros=$(cat osprobed.cfg | grep -E "\:submenu|\:menuentry|\:}")
MainDistro=$(cat maindistro.cfg | grep -E "\:submenu|\:menuentry|\:}")
HasAlien=$(grep -icwE "windows|osx|darwin|hurd|gnuhurd" osprobed.cfg)
if (( $HasAlien >= 1 )) ; then
	echo "Found " $HasAlien " Alien entries : " $(grep -woE "windows|osx|hurd|gnuhurd" osprobed.cfg)
	AlienDistros="true"
else
	AlienDistros="false"
fi
if (( $HasAlien >= 3 )); then
	while true; do
		read -p "It looks like an Alien invasion! Would you like to contain them in a separate page?
		[Y]es [N]o : " AlienBox
		case $AlienBox in
			[Yy]) echo "This feature is not implemented yet. Please make a request to the developer."
				sleep 3s
				break ;;
			[Nn]) echo "Fine by me. It's easier. Just watch them out!"
				sleep 3s
				break ;;
			*) echo "   Answer [Y]es or [N]o. Is your keyboard broken?" ;;

		esac
	done

fi
# Add information message for grub transformation

echo $HorizontalMenuHeading >> horizontal-grub.cfg

# Call parse function

ParseDistros "osprobed.cfg" ${OSproberDistros[@]}
OsProberLastLine=$LastBracketLine
ParseDistros "maindistro.cfg" ${MainDistro[@]}
if [ $AlienDistros = "true" ]; then
	ParseDistros "AlienDistros" ${OSproberDistros[@]}
	OsProberLastLine=$LastBracketLine
fi
((OsProberLastLine+=1))
cat osprobed.cfg | grep -A 2000 "^$OsProberLastLine\:" | cut -d ":" -s -f 2,3,4 | tr "^" " "  >> horizontal-grub.cfg;
cat grub.cfg | grep -Fm 1 -A 2000 "### END /etc/grub.d/30_os-prober ###" >> horizontal-grub.cfg;

if [ -s horizontal-grub.cfg ]; then
	echo "The new configuration file is created"
	while true; do
	read -p "Do you want to save it as your current /boot/grub/grub.cfg (the old one will be backed up)?
	[Y]es [N]o : " SaveGrubcfg
	case $SaveGrubcfg in
	[Yy]) echo "Copying to system..."
		chmod $GrubcfgAttrs horizontal-grub.cfg
		pkexec cp -b --suffix ."$DateSuffix" "$WorkDir"/horizontal-grub.cfg /boot/grub/grub.cfg
		GrubCopied=$?
		if [ $GrubCopied ]; then
			echo "The new horizontal-menu grub layout was successfully copied to system!"
			echo "Happy grubbing!!"
		else
			echo "Unfortunately the file failed to be copied to system"
			echo "Exiting..."
			exit;
		fi
		# TODO ask to delete workdir
		break ;;
	[Nn]) echo " The new configuration file is saved at "$WorkDir"/grub.cfg"
			echo "You may use this command to save at system (the old one will be backed up)"
			echo "sudo cp -b --suffix ."$DateSuffix" "$WorkDir"/horizontal-grub.cfg /boot/grub/grub.cfg "
			break ;;
		*) echo "   Answer [Y]es or [N]o. You will keep the file locally, if you answer 'No'" ;;
	esac
	done
else
	echo "There were errors and the grub configuration could not be created."
	echo "If you think this is a bug, please report it to the script author."
fi

exit