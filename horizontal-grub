#!/bin/bash
#####################################################################
## ===================== Disclaimer ============================== ##
## This script-program is a proof-of-concept project and           ##
## a self training playground on Bash scripting.                   ##
## It is free for copy and use, while I am not responsible for any ##
## damage on your software or hardware. Use at your own risk!      ##
## It would be kind if you report any possible bugs, or ideas for  ##
## smart improvement of current code logic and possible new        ##
## features that are relevant.                                     ##
## =============================================================== ##

#####################################################################
##                    horizontal-grub                              ##
## This script will transform the current grub configuration file  ##
## generated by grub, to a fake-horizontal style.                  ##
## It would be more useful if it was accompannied with a           ##
## relevant and suitable theme.                                    ##
## There is a theme as a work in progress, which will be           ##
## a possible template for theme developers to create some more.   ##
## =============================================================== ##
#####           petsam's "Adventures in Bash"                   #####
#####################################################################


# Don't run as root or sudo
if (( $(id -u) == 0 )); then
    echo "You should not run this script as root"
    echo "Exiting..."
    exit;
fi

# TODO Unnecessary Special character in Grub entry REPORT at Manjaro grub
# TODO consider a grub patch to have better distro names-labels in menus

# Help message
HorizontalMenuHelp="horizontal-grub transforms the current grub configuration file generated by grub, to a fake-horizontal style
    Usage:
    horizontal-grub [PATH] If PATH is ommited, default /boot/grub/grub.cfg will be used
    horizontal-grub (-h --help) This help information message"


# Check for given command line parameters

CustomCfg=false
if [ $# -eq 0 ]; then
    #echo "No arguments provided"
    #echo -e "$HorizontalMenuHelp"
	GrubcfgPath="/boot/grub/grub.cfg"
elif [ $1 = "-h" ] || [ $1 = "--help" ]; then
	echo -e "$HorizontalMenuHelp"
	exit;
else
	ArgCfg="$(pwd)"/"$1"
	if [ -r "$ArgCfg" ]; then
		GrubcfgPath="$ArgCfg"
		CustomCfg=true
	else
		echo "The provided argument is not a readable file"
		echo -e "$HorizontalMenuHelp"
		exit;
	fi
fi

HorizontalMenuHeading="
#### Trasformed grub menu to pseudo-horizontal by horizontal-grub ####
"
echo "Transforming " $GrubcfgPath
# Create work directory
DateSuffix=$(date +%s)
if [ -w /tmp ];then
	WorkDir=/tmp/horizontal-grub-"$DateSuffix"
else
	WorkDir=$HOME/.local/tmp/horizontal-grub-"$DateSuffix"
fi
mkdir -p "$WorkDir"
echo "Created working directory :" "$WorkDir"
cd $WorkDir
#echo "Custom " $CustomCfg " grubpath " $GrubcfgPath
if [ $CustomCfg = true ]; then
		cp "$GrubcfgPath" grub.cfg
elif [ $(ls /boot/grub | grep -E "grub.cfg$") ]; then
		pkexec cp /boot/grub/grub.cfg "$WorkDir"/grub.cfg
		pkexec chown $USER "$WorkDir"/grub.cfg
else
	echo "Grub configuration /boot/grub/grub.cfg was not found."
	echo "Exiting..."
	rm -R "$WorkDir"
	exit 1;
fi

if ! [ -f grub.cfg ]; then
	echo "Grub configuration was not found."
	echo "Exiting..."
	rm -R "$WorkDir"
	exit 1;
fi

if (( $(cat grub.cfg | grep -cF "#### Trasformed grub menu to pseudo-horizontal by horizontal-grub ####") >= 1 )); then
	echo "This grub configuration is already transformed by horizontal-menu."
	echo "Exiting..."
	rm -R "$WorkDir"
	exit 1;
fi

# Split sections

cat grub.cfg | grep -Fm 1 -B 2000 "### BEGIN /etc/grub.d/10_linux ###" > horizontal-grub.cfg
cat grub.cfg | grep -Fm 1 -A 2000 "### BEGIN /etc/grub.d/10_linux ###" | grep -Fm 1 -B 2000 "### END /etc/grub.d/10_linux ###" | grep -nv ^# | tr " " "^" > maindistro.cfg
cat grub.cfg | grep -Fm 1 -A 2000 "### BEGIN /etc/grub.d/30_os-prober ###" | grep -Fm 1 -B 2000 "### END /etc/grub.d/30_os-prober ###" | grep -nv ^# | tr " " "^" > osprobed.cfg

# Define Parse function

function ParseDistros {
	if [ $# = 0 ]; then
		echo "Not grub compatible data in the file. Something is wrong. Exiting..."
		return 1
	elif [ $# = 1 ]; then
		echo "Not distro configuration found. Something went wrong. Exiting..."
		return 1
	fi

	# Parse passed arguments
	local EntriesType="$1"
	shift
	local -a DistroSections
	SentDBs=$#

	for (( i=0; i<$SentDBs; i++ ))
		do
			DistroSections[$i]=$1
			shift
		done

	((SentDBs-=1))
	((SentDBs/=4))
	((SentDBs+=1))
	echo $SentDBs " distro(s) found from " $EntriesType

	# Get distro menus borders

	ProbedEntry=0
	IsParsable=1
	for EntryBorder in ${DistroSections[@]}
		do
			CurrEntry="$(echo $EntryBorder | grep -woE "submenu|menuentry|}")"
			if [ "$CurrEntry" = "menuentry" ]; then
				MainEntry[$ProbedEntry]=$(echo $EntryBorder | cut -d ":" -f1)
				MainClass[$ProbedEntry]=$(echo $EntryBorder | awk -F "--" '{  print $2 }')
				MainName[$ProbedEntry]=$(echo $EntryBorder |  awk -F "'" '{  print $2 }')
				if [ "$EntriesType" = "maindistro.cfg" ]; then
					MainDistroClass=$(echo $EntryBorder | awk -F "--" '{  print $2 }')
				fi
				IsParsable=1
			elif [ "$CurrEntry" = "submenu" ]; then
				IsParsable=0
				EntryStart[$ProbedEntry]=$(echo $EntryBorder | cut -d ":" -f1)
			else
				if [ "$IsParsable" = 0 ]; then
					EntryEnd[$ProbedEntry]=$(echo $EntryBorder | cut -d ":" -f1)
					LastBracketLine=${EntryEnd[$ProbedEntry]}
					((ProbedEntry+=1))
				fi

				IsParsable=1
			fi
		done

	# Remove main distro class
	if [ "$EntriesType" = "maindistro.cfg" ]; then
		sed -i '/menuentry\^/ s/\-\-'$MainDistroClass'//g' "$WorkDir"/"$EntriesType"
	fi

	# Advanced submenu entries
	if [ "$EntriesType" = "maindistro.cfg" ]; then
		EntryOut=1
	else
		EntryOut=0
		for StartLine in ${EntryStart[@]}
			do
				MainEntryName="\^\^\>\>\>\>\^\^"${MainName[$EntryOut]}
				cat "$EntriesType" | grep "^${StartLine}\:" | awk -F "'" -v OFS="'" -v mainentry="$MainEntryName" ' { print $1, mainentry, $3, $4, $5 }' 2>/dev/null | cut -d ":" -f2,3,4 | tr "^" " " >> horizontal-grub.cfg
				((EntryOut+=1))
			done
	fi

# Distro menu sections

	until [ $EntryOut = 0 ]
		do
			((EntryOut-=1))
			RStartLine=${EntryStart[$EntryOut]}
			EntryLines=${EntryEnd[$EntryOut]}

			((RStartLine+=1))
			((EntryLines-=$RStartLine))
			if [ "$EntriesType" = "maindistro.cfg" ]; then
			((EntryLines-=2))
			fi
			cat "$EntriesType" | grep "^$RStartLine\:" |  sed 's/class\^gnu-linux\^/'${MainClass[$EntryOut]}'\-\-class\^gnu-linux\^/g' | cut -d ":" -s -f 2,3,4 | tr "^" " "  >> horizontal-grub.cfg
			((RStartLine+=1))
			cat "$EntriesType" | grep -A ${EntryLines} "^$RStartLine\:" | cut -d ":" -s -f 2,3,4 | tr "^" " "  >> horizontal-grub.cfg
		done
}

# Define menu entries vars

OSproberDistros=$(cat osprobed.cfg | grep -E "\:submenu|\:menuentry|\:}")
MainDistro=$(cat maindistro.cfg | grep -E "\:submenu|\:menuentry|\:}")

# Add information message for grub transformation

echo $HorizontalMenuHeading >> horizontal-grub.cfg

# Call parse function

ParseDistros "osprobed.cfg" ${OSproberDistros[@]}
OsProberLastLine=$LastBracketLine
ParseDistros "maindistro.cfg" ${MainDistro[@]}
((OsProberLastLine+=1))
cat osprobed.cfg | grep -A 2000 "^$OsProberLastLine\:" | cut -d ":" -s -f 2,3,4 | tr "^" " "  >> horizontal-grub.cfg;
cat grub.cfg | grep -Fm 1 -A 2000 "### END /etc/grub.d/30_os-prober ###" >> horizontal-grub.cfg;


if [ -s horizontal-grub.cfg ]; then
	echo "The new configuration file is created"
	while true; do
	read -p "Do you want to save it as your current /boot/grub/grub.cfg?
	[Y]es [N]o : " SaveGrubcfg
	case $SaveGrubcfg in
	[Yy]) echo "Copying to system..."
		pkexec cp -b --suffix ."$DateSuffix" "$WorkDir"/horizontal-grub.cfg /boot/grub/grub.cfg
		GrubCopied=$?
		if [ $GrubCopied ]; then
			echo "The new horizontal-menu grub layout was successfully copied to system!"
			echo "Happy grubbing!!"
		else
			echo "Unfortunately the file failed to be copied to system"
			echo "Exiting..."
			exit;
		fi
		# TODO ask to delete workdir
		break ;;
	[Nn]) echo " The new configuration file is saved at "$WorkDir"/grub.cfg"
			echo "You may use this command to save at system (the old one is backed up)"
			echo "sudo cp -b --suffix ."$DateSuffix" "$WorkDir"/horizontal-grub.cfg /boot/grub/grub.cfg "
	break ;;
		*) echo "   Answer [Y]es or [N]o. You will keep the file locally, if you answer 'No'" ;;
	esac
	done
else
	echo "There were errors and the grub configuration could not be created."
	echo "If you think this is a bug, please report it to the script author."
fi

exit